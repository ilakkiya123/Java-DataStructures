DataStructures :

Ultimately Everything in Software world is dealing with Data .And how we efficiently manage is very important .
Efficiency -> Performance / Memory 

Algorithm - Set of Instructions / Pseudo code .It is not actually a code .
Based on the algorithm / pseudocode we write the code in different language . syntatically it might be different but algorithm remains the same .

Data Structures - A way to organise and store data in an efficient way .

ADT - Abstract DataType 

Linear Search :

class Hello{
    public static void main(String args[]){
        int nums[] = {1,3,5,7,9,11,13,15,17};
        int target = 77;
        int result  = linearsearch(nums,target);
        if(result != -1){
            System.out.println("The target value is in the index : " + result);
        }
        else{
            System.out.println("Element not found");
        }
    }

    public static int linearsearch(int[] nums, int target) {
   
    for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                return i;
            }
        }

        return -1;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary Search :

class Hello{
    public static void main(String args[]){
        int nums[] = {1,3,5,7,9,11,13,15,17};
        int target = 11;
        int result  = binarysearch(nums,target);
        if(result != -1){
            System.out.println("The target value is in the index : " + result);
        }
        else{
            System.out.println("Element not found");
        }
    }

    public static int binarysearch(int[] nums, int target) {
        
        int left = 0 ;
        int right = (nums.length)-1;
        
        while(left<=right){
            int mid = (left + right)/2;
            if(nums[mid] == target){
                return mid ;
            }
            else if(nums[mid] < target){
                left = mid+1;
            }
            else if(nums[mid] > target){
                right = mid -1 ;
            }
        }
        return -1;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary search with recursive function :

class Hello{
    public static void main(String args[]){
        int nums[] = {1,3,5,7,9,11,13,15,17};
        int target = 11;
        int result  = binarysearch(nums,target,0,nums.length-1);
        if(result != -1){
            System.out.println("The target value is in the index : " + result);
        }
        else{
            System.out.println("Element not found");
        }
    }

    public static int binarysearch(int[] nums, int target , int left , int right) {
        
        while(left<=right){
            int mid = (left + right)/2;
            if(nums[mid] == target){
                return mid ;
            }
            else if(nums[mid] < target){
                left = mid+1;
                return binarysearch(nums,target,mid+1,right);
            }
            else if(nums[mid] > target){
                right = mid -1 ;return binarysearch(nums,target,left,mid-1);
            }
        }
        return -1;
    }
}

----------------------------------------------------------------------------------------------------------
Bubble Sort :
Time Complexity  O(n2) - Quadratic Time Complexity 

//Here for every outer loop increment by 1 , In inner loop we check every near by 2 elements and swap to bring the largest element to the right .
By doing this each outer loop iteration we bring largest element to the right most .But inner loop does the swap .

Basically In bubble sort we compare first 2 elements and swap the largest num to the right , If we want to arrange them in asc order .
First compares index - 0 and index - 1 
Next it compares index - 1 and index - 2 , It compares until the last element .

Outer loop makes it to run that many times (6 complete traverse it does , each time it tries to bring the largest num to the right corner )
Innner loop does the swapping btw 2 elements .

class Hello{
    public static void main(String args[]){
        int nums[] = {9,5,7,13,27,14};
        System.out.println("Before Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }

        int temp = 0 ;

        for(int i=0;i<nums.length;i++){
            for(int j=0;j<nums.length-1;j++){
                if(nums[j] > nums[j+1]){
                    temp = nums[j];
                    nums[j] = nums[j+1];
                    nums[j+1] = temp ;
                }
            }
            // System.out.println();
            // for(int n : nums){
            //     System.out.print(n + " ");
            // }
        }
        System.out.println();
        System.out.println("After Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }
    }
}


Tips :
//Logic - In every outer loop iteration we plan to bring the smallest value to the right (If sorting in desc ) , 
But swapping is done on all the elements in the inner loop .

When Trying to arrange in asc order , then on first outer loop iteration max value goes to the right.
When Trying to arrange in desc order , then on first outer loop iteration min value goes to the right . 


Logic to check the changes in inner and outer loop 

class Hello{
    public static void main(String srgs[]){
        int nums[] = {91,15,78,113,27,14};

        System.out.print("Before Sorting ---> ");
        for(int n : nums){
            System.out.print(n + " ");
        }
        System.out.println();
        int temp = 0 ; 
        for(int i=0;i<nums.length-1;i++){
            System.out.println("i-> " + i);
            for(int j=0;j<nums.length-1;j++){
                if(nums[j] > nums[j+1]){
                    temp = nums[j];
                    nums[j] = nums[j+1];
                    nums[j+1] = temp ;
                } 
                System.out.print("j-> " + j + " ---> ");
                for(int n : nums){
                    System.out.print(n + " ");
                }
                System.out.println();
            }
            System.out.println();
            for(int n : nums){
                System.out.print(n + " ");
            }
            System.out.println();
        }

        System.out.println();
        System.out.print("After Sorting ---> ");
        for(int n : nums){
            System.out.print(n + " ");
        }
    }
}

O/P :

Before Sorting ---> 91 15 78 113 27 14 
i-> 0
j-> 0 ---> 15 91 78 113 27 14 
j-> 1 ---> 15 78 91 113 27 14 
j-> 2 ---> 15 78 91 113 27 14 
j-> 3 ---> 15 78 91 27 113 14 
j-> 4 ---> 15 78 91 27 14 113 

15 78 91 27 14 113 
i-> 1
j-> 0 ---> 15 78 91 27 14 113 
j-> 1 ---> 15 78 91 27 14 113
j-> 2 ---> 15 78 27 91 14 113
j-> 3 ---> 15 78 27 14 91 113
j-> 4 ---> 15 78 27 14 91 113

15 78 27 14 91 113
i-> 2
j-> 0 ---> 15 78 27 14 91 113
j-> 1 ---> 15 27 78 14 91 113
j-> 2 ---> 15 27 14 78 91 113 
j-> 3 ---> 15 27 14 78 91 113
j-> 4 ---> 15 27 14 78 91 113

15 27 14 78 91 113
i-> 3
j-> 0 ---> 15 27 14 78 91 113
j-> 1 ---> 15 14 27 78 91 113
j-> 2 ---> 15 14 27 78 91 113
j-> 3 ---> 15 14 27 78 91 113
j-> 4 ---> 15 14 27 78 91 113

15 14 27 78 91 113
i-> 4
j-> 0 ---> 14 15 27 78 91 113
j-> 1 ---> 14 15 27 78 91 113
j-> 2 ---> 14 15 27 78 91 113
j-> 3 ---> 14 15 27 78 91 113
j-> 4 ---> 14 15 27 78 91 113

14 15 27 78 91 113

After Sorting ---> 14 15 27 78 91 113
---------------------------------------------------------------------------------------------------------------
Selection Sort : (Time Complexity - O(n2)

// Here the logic is in the outer loop we will check which is the smallest value and will bring it to the left or largest value to the right .
Swap happens only once in the outer loop , In inner loop we check the smallest .

class Hello{
    public static void main(String args[]){
        int nums[] = {6,5,2,8,3,7};
        int temp = 0 ;
        System.out.println("Before Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }

        int temp_index = -1 ;
        for(int i=0;i<nums.length;i++){
            temp_index = i ;
            for(int j=i+1;j<nums.length;j++){
//this below line we are checking if the num[j] is smallest if so we are making to point the temp index to the smallest value 
                if(nums[temp_index] > nums[j]){
                     temp_index = j ;   
                }
            }
            temp = nums[i];

            nums[i] = nums[temp_index];
            nums[temp_index] = temp ;
        }

     
        System.out.println();
        System.out.println("After Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }
    }
}


------------------------------------------------------------------------------------------------------------------------------------
Insertion Sort :

Here outer loop starts from index 1 and inner loop starts from previous index (first index) .

Now we check if it is oth index > 1st index , If it is greater and condt is true , then we save that in key and bring the greater num and we shift elements .

//Insertion Sort 
class Hello{
    public static void main(String args[]){
        int nums[] = {5,6,2,3,1};
        int size = nums.length;
        System.out.println("Before Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }

        for(int i=1;i<size;i++){
            int key = nums[i];
            int j=i-1;

//Here this line j>=0 should be come first otherwise we face Array Index Out Of Bound Exception .As in java while loop condt is validatedd from left to right .
If this line comes like this while ( array[j] > key && j >= 0 ) , it throws ArrayIndexOutOf Bound exception , because arr[-1] will come .
            while(j>=0 && nums[j] > key){
                nums[j+1] = nums[j];
                j--;
            }
            nums[j+1] = key ;
        }
       
        System.out.println();
        System.out.println("After Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }
    }
}

---------------------------------------------------------------------------------------------------------------------------

//Quick Sort 
class Hello{
    public static void main(String args[]){
        int nums[] = {5,6,2,3,1,8,4};
        int size = nums.length;
        System.out.println("Before Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }
     
        quicksort(nums,0,nums.length-1);

        

        System.out.println();
        System.out.println("After Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }
    }

    public static void  quicksort(int[] nums , int low , int high){
           if(low<high){
            int pi = partition(nums, low, high);
            quicksort(nums, low, pi-1);
            quicksort(nums, pi+1, high);
           }
    }

    public static int partition(int nums[] , int low , int high ){
            int pivot = nums[high];
            int temp = 0 ;
            int i = low - 1;
            int j;
            for(j = low ; j<high ; j++){

                if(nums[j] < pivot){
                        i++ ;
                        temp = nums[i];
                        nums[i] = nums[j];
                        nums[j] = temp ;
                }
            }
                temp = nums[i+1];
                nums[i+1] = nums[high];
                nums[high] = temp ;

                return i+1;
            
    }
}
