DataStructures :

Ultimately Everything in Software world is dealing with Data .And how we efficiently manage is very important .
Efficiency -> Performance / Memory 

Algorithm - Set of Instructions / Pseudo code .It is not actually a code .
Based on the algorithm / pseudocode we write the code in different language . syntatically it might be different but algorithm remains the same .

Data Structures - A way to organise and store data in an efficient way .

ADT - Abstract DataType 

Linear Search :

class Hello{
    public static void main(String args[]){
        int nums[] = {1,3,5,7,9,11,13,15,17};
        int target = 77;
        int result  = linearsearch(nums,target);
        if(result != -1){
            System.out.println("The target value is in the index : " + result);
        }
        else{
            System.out.println("Element not found");
        }
    }

    public static int linearsearch(int[] nums, int target) {
   
    for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                return i;
            }
        }

        return -1;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary Search :

class Hello{
    public static void main(String args[]){
        int nums[] = {1,3,5,7,9,11,13,15,17};
        int target = 11;
        int result  = binarysearch(nums,target);
        if(result != -1){
            System.out.println("The target value is in the index : " + result);
        }
        else{
            System.out.println("Element not found");
        }
    }

    public static int binarysearch(int[] nums, int target) {
        
        int left = 0 ;
        int right = (nums.length)-1;
        
        while(left<=right){
            int mid = (left + right)/2;
            if(nums[mid] == target){
                return mid ;
            }
            else if(nums[mid] < target){
                left = mid+1;
            }
            else if(nums[mid] > target){
                right = mid -1 ;
            }
        }
        return -1;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary search with recursive function :

class Hello{
    public static void main(String args[]){
        int nums[] = {1,3,5,7,9,11,13,15,17};
        int target = 11;
        int result  = binarysearch(nums,target,0,nums.length-1);
        if(result != -1){
            System.out.println("The target value is in the index : " + result);
        }
        else{
            System.out.println("Element not found");
        }
    }

    public static int binarysearch(int[] nums, int target , int left , int right) {
        
        while(left<=right){
            int mid = (left + right)/2;
            if(nums[mid] == target){
                return mid ;
            }
            else if(nums[mid] < target){
                left = mid+1;
                return binarysearch(nums,target,mid+1,right);
            }
            else if(nums[mid] > target){
                right = mid -1 ;return binarysearch(nums,target,left,mid-1);
            }
        }
        return -1;
    }
}

----------------------------------------------------------------------------------------------------------
Bubble Sort :

Basically In bubble sort we compare first 2 elements and swap the largest num to the right , If we want to arrange them in asc order .
First compares index - 0 and index - 1 
Next it compares index - 1 and index - 2 , It compares until the last element .

Outer loop makes it to run that many times (6 complete traverse it does , each time it tries to bring the largest num to the right corner )
Innner loop does the swapping btw 2 elements .

class Hello{
    public static void main(String args[]){
        int nums[] = {9,5,7,13,27,14};
        System.out.println("Before Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }

        int temp = 0 ;

        for(int i=0;i<nums.length;i++){
            for(int j=0;j<nums.length-1;j++){
                if(nums[j] > nums[j+1]){
                    temp = nums[j];
                    nums[j] = nums[j+1];
                    nums[j+1] = temp ;
                }
            }
            // System.out.println();
            // for(int n : nums){
            //     System.out.print(n + " ");
            // }
        }
        System.out.println();
        System.out.println("After Sorting");
        for(int n : nums){
            System.out.print(n + " ");
        }
    }
}
