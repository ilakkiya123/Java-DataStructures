DataStructures :

Ultimately Everything in Software world is dealing with Data .And how we efficiently manage is very important .
Efficiency -> Performance / Memory 

Algorithm - Set of Instructions / Pseudo code .It is not actually a code .
Based on the algorithm / pseudocode we write the code in different language . syntatically it might be different but algorithm remains the same .

Data Structures - A way to organise and store data in an efficient way .

ADT - Abstract DataType 

Linear Search :

class Hello{
    public static void main(String args[]){
        int nums[] = {1,3,5,7,9,11,13,15,17};
        int target = 77;
        int result  = linearsearch(nums,target);
        if(result != -1){
            System.out.println("The target value is in the index : " + result);
        }
        else{
            System.out.println("Element not found");
        }
    }

    public static int linearsearch(int[] nums, int target) {
   
    for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                return i;
            }
        }

        return -1;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary Search :

class Hello{
    public static void main(String args[]){
        int nums[] = {1,3,5,7,9,11,13,15,17};
        int target = 11;
        int result  = binarysearch(nums,target);
        if(result != -1){
            System.out.println("The target value is in the index : " + result);
        }
        else{
            System.out.println("Element not found");
        }
    }

    public static int binarysearch(int[] nums, int target) {
        
        int left = 0 ;
        int right = (nums.length)-1;
        
        while(left<=right){
            int mid = (left + right)/2;
            if(nums[mid] == target){
                return mid ;
            }
            else if(nums[mid] < target){
                left = mid+1;
            }
            else if(nums[mid] > target){
                right = mid -1 ;
            }
        }
        return -1;
    }
}
